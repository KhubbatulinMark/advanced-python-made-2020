<row Id="4134072" PostTypeId="1" AcceptedAnswerId="4134183" CreationDate="2019-11-09T13:21:05.707" Score="10" ViewCount="476" Body="&lt;p&gt;In a standalone J2SE application I'm using some library code that uses &lt;code&gt;Log.debug&lt;/code&gt; from Commons Logging to output some debug information. My app currently has no logging configuration whatsoever. By default I see some log messages in &lt;em&gt;stdout&lt;/em&gt;, but not the debug ones. What's the quickest way to enable this?&lt;/p&gt;&#xA;" OwnerUserId="85821" LastEditorUserId="21234" LastEditDate="2012-05-17T15:18:04.127" LastActivityDate="2012-05-17T15:18:04.127" Title="Is SEO better better better done with repetition?" Tags="&lt;java&gt;&lt;debugging&gt;&lt;logging&gt;&lt;apache-commons-logging&gt;" AnswerCount="1" CommentCount="0" />
<row Id="4132645" PostTypeId="2" ParentId="4132558" CreationDate="2010-11-09T10:28:37.563" Score="3" Body="&lt;p&gt;If you want your core-algorithm to execute a specialized algorithm, there should be some kind of contract between the core-algorithm and the specialized algorithm.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;If you define this contract as an interface, your container is simply a container containing pointers to these interfaces, e.g.:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;class IAlgorithm&#xA;   {&#xA;   public:&#xA;      virtual double operator()(double d) = 0;&#xA;   };&#xA;&#xA;typedef std::vector&amp;lt;IAlgorithm *&amp;gt; Algorithms;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Calling a random algorithm is then simply taking the size of the vector, taking a random value between zero and the size of the list (0..size-1), taking the entry at that position and calling the interface.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Alternatively, you can also use the new C++0x std::function construction, like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;functional&amp;gt;&#xA;typedef std::function&amp;lt;double(double)&amp;gt; Algorithm;&#xA;typedef std::vector&amp;lt;Algorithm&amp;gt; Algorithms;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Taking an algorithm is similar, you should be able to call an algorithm like this:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Algorithms myAlgorithms;&#xA;...&#xA;double myresult = myAlgorithms[2](mydouble);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;This approach has the advantage that you can also use lambda's.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; This is an example that uses lambda's.  It compiles and works as expected with Visual Studio 2010 (just tested this myself):&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&#xA;#include &amp;lt;vector&amp;gt;&#xA;#include &amp;lt;functional&amp;gt; &#xA;typedef std::function&amp;lt;double(double)&amp;gt; Algorithm; &#xA;typedef std::vector&amp;lt;Algorithm&amp;gt; Algorithms; &#xA;&#xA;int main()&#xA;{&#xA;Algorithms algorithms;&#xA;algorithms.push_back([](double d)-&amp;gt;double{return d+d;});&#xA;algorithms.push_back([](double d)-&amp;gt;double{return d*d;});&#xA;&#xA;std::cout &amp;lt;&amp;lt; algorithms[0](5) &amp;lt;&amp;lt; std::endl;&#xA;std::cout &amp;lt;&amp;lt; algorithms[1](5) &amp;lt;&amp;lt; std::endl;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="163551" LastEditorUserId="163551" LastEditDate="2010-11-09T14:06:58.460" LastActivityDate="2010-11-09T14:06:58.460" CommentCount="8" />
<row Id="4182010" PostTypeId="1" AcceptedAnswerId="4186180" CreationDate="2019-11-15T06:43:06.107" Score="5" ViewCount="4402" Body="&lt;p&gt;Is this the fastest (execution time) way to find the longest element in a list?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl&#xA;use warnings;&#xA;use 5.012;&#xA;use List::Util qw(reduce);&#xA;use List::Util::XS;&#xA;&#xA;my @array = qw( one two three four five six seven eight nine ten eleven );&#xA;&#xA;my $l = reduce{ length($a) &amp;gt; length($b) ? $a : $b } @array;&#xA;&#xA;say $l;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="198183" LastEditorUserId="198183" LastEditDate="2010-11-15T15:17:16.153" LastActivityDate="2014-12-09T20:17:49.697" Title="What is SEO?" Tags="&lt;perl&gt;&lt;algorithm&gt;&lt;performance&gt;" AnswerCount="10" CommentCount="13" FavoriteCount="3" />
<row Id="4182010" PostTypeId="1" AcceptedAnswerId="4186180" CreationDate="2020-11-15T06:43:06.107" Score="20" ViewCount="4402" Body="&lt;p&gt;Is this the fastest (execution time) way to find the longest element in a list?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env perl&#xA;use warnings;&#xA;use 5.012;&#xA;use List::Util qw(reduce);&#xA;use List::Util::XS;&#xA;&#xA;my @array = qw( one two three four five six seven eight nine ten eleven );&#xA;&#xA;my $l = reduce{ length($a) &amp;gt; length($b) ? $a : $b } @array;&#xA;&#xA;say $l;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;" OwnerUserId="198183" LastEditorUserId="198183" LastEditDate="2010-11-15T15:17:16.153" LastActivityDate="2014-12-09T20:17:49.697" Title="Is Python better than Javascript?" Tags="&lt;perl&gt;&lt;algorithm&gt;&lt;performance&gt;" AnswerCount="10" CommentCount="13" FavoriteCount="3" />